// <<This file was autogenerated by NativeLibSourceGenerator>>
// <<This file is not mean to be read by human>>
#if UNITY_IOS
#define __IOS__
#endif
using NativeLibSourceGeneratorShared;
using System;
using System.Runtime.InteropServices;

using System.IO;
using System.Reflection;

namespace NeuroTech.Spectrum
{
    public sealed class SpectrumNativeLib
    {
        private static string GetApplicationRoot()
        {
            return Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location) ?? string.Empty;
        }

        private static readonly Lazy<ISpectrumNativeLib> _api = new Lazy<ISpectrumNativeLib>(() =>
        {
            var platform = Platform.Type;
            try
            {
                switch (platform)
                {
                    case NativePlatformType.WinArm:
                    case NativePlatformType.WinArm64:
                    case NativePlatformType.WinX64:
                    case NativePlatformType.WinX86:
                        Environment.SetEnvironmentVariable("PATH", $"{ Path.Combine(GetApplicationRoot(), @"libs\windows") };{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                    case NativePlatformType.LinuxArm:
                    case NativePlatformType.LinuxArm64:
                    case NativePlatformType.LinuxX64:
                    case NativePlatformType.LinuxX86:
                        Environment.SetEnvironmentVariable("PATH", $"{ Path.Combine(GetApplicationRoot(), @"libs\linux") };{Environment.GetEnvironmentVariable("PATH")}"); // Not embed
                        break;
                }
            }
            catch (Exception)
            {
                // ignore for IL2CPP
            }

            switch (platform)
            {
#if !__IOS__
                case NativePlatformType.WinArm:
                    return new WinArmImpl();
                case NativePlatformType.WinArm64:
                    return new WinArm64Impl();
                case NativePlatformType.WinX64:
                    return new WinX64Impl();
                case NativePlatformType.WinX86:
                    return new WinX86Impl();
                case NativePlatformType.AndroidARMv7:
                    return new AndroidARMv7Impl();
                case NativePlatformType.AndroidARMv8:
                    return new AndroidARMv8Impl();
                case NativePlatformType.AndroidX86:
                    return new AndroidX86Impl();
                case NativePlatformType.AndroidX64:
                    return new AndroidX64Impl();
                case NativePlatformType.OSX:
                    return new OSXImpl();
                case NativePlatformType.LinuxX64:
                    return new LinuxX64Impl();
                case NativePlatformType.LinuxX86:
                    return new LinuxX86Impl();
#endif
                case NativePlatformType.iOS:
#if __IOS__
                    return new iOSImpl();
#else
                    return new  DefaultImpl();
#endif
            }
            throw new NotSupportedException($"[OSDescription]:[{RuntimeInformation.OSDescription}]");
        });
        private SpectrumNativeLib() { }
        public static ISpectrumNativeLib Inst
        {
            get => _api.Value;
        }
    }
    
    public class DefaultImpl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return DefaultImpl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            DefaultImpl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            DefaultImpl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            DefaultImpl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            DefaultImpl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            DefaultImpl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            DefaultImpl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            DefaultImpl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            DefaultImpl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            DefaultImpl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return DefaultImpl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return DefaultImpl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            DefaultImpl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            DefaultImpl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return DefaultImpl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            DefaultImpl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            DefaultImpl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            DefaultImpl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            DefaultImpl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            DefaultImpl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            DefaultImpl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class WinX86Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return WinX86Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            WinX86Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            WinX86Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            WinX86Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            WinX86Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            WinX86Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            WinX86Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            WinX86Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            WinX86Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            WinX86Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return WinX86Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return WinX86Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            WinX86Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            WinX86Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return WinX86Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            WinX86Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            WinX86Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            WinX86Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            WinX86Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            WinX86Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin32, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            WinX86Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class WinX64Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return WinX64Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            WinX64Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            WinX64Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            WinX64Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            WinX64Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            WinX64Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            WinX64Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            WinX64Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            WinX64Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            WinX64Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return WinX64Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return WinX64Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            WinX64Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            WinX64Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return WinX64Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            WinX64Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            WinX64Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            WinX64Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            WinX64Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            WinX64Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWin64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            WinX64Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class WinArmImpl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return WinArmImpl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            WinArmImpl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            WinArmImpl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            WinArmImpl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            WinArmImpl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            WinArmImpl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            WinArmImpl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            WinArmImpl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            WinArmImpl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            WinArmImpl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return WinArmImpl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return WinArmImpl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            WinArmImpl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            WinArmImpl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return WinArmImpl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            WinArmImpl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            WinArmImpl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            WinArmImpl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            WinArmImpl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            WinArmImpl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            WinArmImpl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class WinArm64Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return WinArm64Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            WinArm64Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            WinArm64Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            WinArm64Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            WinArm64Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            WinArm64Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            WinArm64Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            WinArm64Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            WinArm64Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            WinArm64Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return WinArm64Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return WinArm64Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            WinArm64Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            WinArm64Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return WinArm64Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            WinArm64Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            WinArm64Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            WinArm64Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            WinArm64Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            WinArm64Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibNameWinArm64, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            WinArm64Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class iOSImpl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return iOSImpl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            iOSImpl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            iOSImpl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            iOSImpl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            iOSImpl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            iOSImpl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            iOSImpl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            iOSImpl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            iOSImpl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            iOSImpl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return iOSImpl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return iOSImpl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            iOSImpl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            iOSImpl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return iOSImpl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            iOSImpl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            iOSImpl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            iOSImpl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            iOSImpl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            iOSImpl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibNameiOS, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            iOSImpl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class AndroidARMv7Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return AndroidARMv7Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            AndroidARMv7Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            AndroidARMv7Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            AndroidARMv7Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            AndroidARMv7Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv7Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv7Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            AndroidARMv7Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            AndroidARMv7Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv7Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            AndroidARMv7Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            AndroidARMv7Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            AndroidARMv7Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            AndroidARMv7Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class AndroidARMv8Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return AndroidARMv8Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            AndroidARMv8Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            AndroidARMv8Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            AndroidARMv8Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            AndroidARMv8Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv8Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv8Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            AndroidARMv8Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            AndroidARMv8Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return AndroidARMv8Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            AndroidARMv8Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            AndroidARMv8Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            AndroidARMv8Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            AndroidARMv8Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class AndroidX86Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return AndroidX86Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            AndroidX86Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            AndroidX86Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            AndroidX86Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            AndroidX86Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidX86Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidX86Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            AndroidX86Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            AndroidX86Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            AndroidX86Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return AndroidX86Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return AndroidX86Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            AndroidX86Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            AndroidX86Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return AndroidX86Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            AndroidX86Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            AndroidX86Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            AndroidX86Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            AndroidX86Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            AndroidX86Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            AndroidX86Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class AndroidX64Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return AndroidX64Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            AndroidX64Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            AndroidX64Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            AndroidX64Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            AndroidX64Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidX64Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            AndroidX64Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            AndroidX64Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            AndroidX64Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            AndroidX64Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return AndroidX64Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return AndroidX64Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            AndroidX64Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            AndroidX64Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return AndroidX64Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            AndroidX64Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            AndroidX64Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            AndroidX64Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            AndroidX64Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            AndroidX64Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            AndroidX64Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class OSXImpl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return OSXImpl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            OSXImpl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            OSXImpl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            OSXImpl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            OSXImpl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            OSXImpl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            OSXImpl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            OSXImpl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            OSXImpl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            OSXImpl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return OSXImpl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return OSXImpl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            OSXImpl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            OSXImpl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return OSXImpl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            OSXImpl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            OSXImpl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            OSXImpl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            OSXImpl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            OSXImpl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            OSXImpl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class LinuxX64Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return LinuxX64Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            LinuxX64Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            LinuxX64Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            LinuxX64Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            LinuxX64Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            LinuxX64Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            LinuxX64Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            LinuxX64Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            LinuxX64Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            LinuxX64Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return LinuxX64Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return LinuxX64Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            LinuxX64Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            LinuxX64Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return LinuxX64Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            LinuxX64Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            LinuxX64Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            LinuxX64Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            LinuxX64Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            LinuxX64Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            LinuxX64Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
    public class LinuxX86Impl : ISpectrumNativeLib
    {
        
        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "createSpectrumMath")]
        private static extern IntPtr n_createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq);
        public IntPtr createSpectrumMath(int sampl_rate, int fft_window, int process_win_freq)
        { 
           return LinuxX86Impl.n_createSpectrumMath( sampl_rate, fft_window, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "freeSpectrumMath")]
        private static extern void n_freeSpectrumMath(IntPtr ptr);
        public void freeSpectrumMath(IntPtr ptr)
        { 
            LinuxX86Impl.n_freeSpectrumMath( ptr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathInitParams")]
        private static extern void n_SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth);
        public void SpectrumMathInitParams(IntPtr ptr, int up_border_frequency, bool normalize_spect_by_bandwidth)
        { 
            LinuxX86Impl.n_SpectrumMathInitParams( ptr, up_border_frequency, normalize_spect_by_bandwidth); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetFFTWinLengthAndProccessFreq")]
        private static extern void n_SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq);
        public void SpectrumMathSetFFTWinLengthAndProccessFreq(IntPtr ptr, int fft_win_length, int process_win_freq)
        { 
            LinuxX86Impl.n_SpectrumMathSetFFTWinLengthAndProccessFreq( ptr, fft_win_length, process_win_freq); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetWavesCoeffs")]
        private static extern void n_SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef);
        public void SpectrumMathSetWavesCoeffs(IntPtr spectrumMathPtr, double d_coef, double t_coef, double a_coef, double b_coef, double g_coef)
        { 
            LinuxX86Impl.n_SpectrumMathSetWavesCoeffs( spectrumMathPtr, d_coef, t_coef, a_coef, b_coef, g_coef); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHanningWinSpect")]
        private static extern void n_SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHanningWinSpect(IntPtr spectrumMathPtr)
        { 
            LinuxX86Impl.n_SpectrumMathSetHanningWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetHammingWinSpect")]
        private static extern void n_SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr);
        public void SpectrumMathSetHammingWinSpect(IntPtr spectrumMathPtr)
        { 
            LinuxX86Impl.n_SpectrumMathSetHammingWinSpect( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathPushData")]
        private static extern void n_SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount);
        public void SpectrumMathPushData(IntPtr spectrumMathPtr, [In,Out] double[] samples, int sampleCount)
        { 
            LinuxX86Impl.n_SpectrumMathPushData( spectrumMathPtr, samples, sampleCount); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathProcessData")]
        private static extern void n_SpectrumMathProcessData(IntPtr spectrumMathPtr);
        public void SpectrumMathProcessData(IntPtr spectrumMathPtr)
        { 
            LinuxX86Impl.n_SpectrumMathProcessData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathComputeSpectrum")]
        private static extern void n_SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size);
        public void SpectrumMathComputeSpectrum(IntPtr spectrumMathPtr, [In,Out] double[] vals_arr, int arr_size)
        { 
            LinuxX86Impl.n_SpectrumMathComputeSpectrum( spectrumMathPtr, vals_arr, arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTBinsFor1Hz")]
        private static extern double n_SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr);
        public double SpectrumMathGetFFTBinsFor1Hz(IntPtr spectrumMathPtr)
        { 
           return LinuxX86Impl.n_SpectrumMathGetFFTBinsFor1Hz( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathGetFFTWindow")]
        private static extern int n_SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr);
        public int SpectrumMathGetFFTWindow(IntPtr spectrumMathPtr)
        { 
           return LinuxX86Impl.n_SpectrumMathGetFFTWindow( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfo")]
        private static extern void n_SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data);
        public void SpectrumMathReadRawSpectrumInfo(IntPtr spectrumMathPtr, ref NativeRawSpectrumData raw_spect_data)
        { 
            LinuxX86Impl.n_SpectrumMathReadRawSpectrumInfo( spectrumMathPtr,ref raw_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfo")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data);
        public void SpectrumMathReadWavesSpectrumInfo(IntPtr spectrumMathPtr, ref WavesSpectrumData waves_spect_data)
        { 
            LinuxX86Impl.n_SpectrumMathReadWavesSpectrumInfo( spectrumMathPtr,ref waves_spect_data); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadSpectrumArrSize")]
        private static extern uint n_SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr);
        public uint SpectrumMathReadSpectrumArrSize(IntPtr spectrumMathPtr)
        { 
           return LinuxX86Impl.n_SpectrumMathReadSpectrumArrSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadRawSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadRawSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] NativeRawSpectrumData[] raw_spect_data_arr, ref uint arr_size)
        { 
            LinuxX86Impl.n_SpectrumMathReadRawSpectrumInfoArr( spectrumMathPtr, raw_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReadWavesSpectrumInfoArr")]
        private static extern void n_SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size);
        public void SpectrumMathReadWavesSpectrumInfoArr(IntPtr spectrumMathPtr, [In,Out] WavesSpectrumData[] waves_spect_data_arr, ref uint arr_size)
        { 
            LinuxX86Impl.n_SpectrumMathReadWavesSpectrumInfoArr( spectrumMathPtr, waves_spect_data_arr,ref arr_size); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetNewSampleSize")]
        private static extern void n_SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr);
        public void SpectrumMathSetNewSampleSize(IntPtr spectrumMathPtr)
        { 
            LinuxX86Impl.n_SpectrumMathSetNewSampleSize( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathClearData")]
        private static extern void n_SpectrumMathClearData(IntPtr spectrumMathPtr);
        public void SpectrumMathClearData(IntPtr spectrumMathPtr)
        { 
            LinuxX86Impl.n_SpectrumMathClearData( spectrumMathPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathReleaseNativeArray")]
        private static extern void n_SpectrumMathReleaseNativeArray(IntPtr arrayPtr);
        public void SpectrumMathReleaseNativeArray(IntPtr arrayPtr)
        { 
            LinuxX86Impl.n_SpectrumMathReleaseNativeArray( arrayPtr); 
        }

        [DllImport(LibNamePropvider.LibName, CallingConvention = CallingConvention.Cdecl, EntryPoint = "SpectrumMathSetSquaredSpect")]
        private static extern void n_SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl);
        public void SpectrumMathSetSquaredSpect(IntPtr spectrumMathPtr, bool fl)
        { 
            LinuxX86Impl.n_SpectrumMathSetSquaredSpect( spectrumMathPtr, fl); 
        }
 
    }
}